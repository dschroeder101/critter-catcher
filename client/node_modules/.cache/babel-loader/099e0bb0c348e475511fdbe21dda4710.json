{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Projects/critter-catcher/src/App.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getFish = async () => {\n      const response = await fetch(\"/critters/fish\");\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.getBugs = async () => {\n      const response = await fetch(\"/critters/bugs\");\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.getDate = async () => {\n      const response = await fetch(`/critters/fish/current?date=${this.state.currentTime.toISOString()}`);\n      console.log(response.json());\n    };\n\n    this.getCurrentFish = async () => {\n      const response = await fetch(`/critters/fish/current?date=${this.state.currentTime.toISOString()}`);\n      console.log(response.json());\n    };\n\n    this.state = {\n      fish: [],\n      bugs: [],\n      selectedHemisphere: \"Northern\",\n      currentTime: new Date()\n    };\n\n    this.changeHemisphere = newHemisphere => {\n      this.setState({\n        selectedHemisphere: newHemisphere\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getFish().then(res => this.setState({\n      fish: res\n    })).catch(err => console.log(err));\n    this.getBugs().then(res => this.setState({\n      bugs: res\n    })).catch(err => console.log(err));\n    let date = new Date();\n    this.setState({\n      currentTime: date\n    });\n    this.getDate().then(res => console.log(res));\n  }\n\n  render() {\n    const fish = this.state.fish.map(fish => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 14\n        }\n      }, fish.name);\n    });\n    const bugs = this.state.bugs.map(bug => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 14\n        }\n      }, bug.name);\n    });\n    const hemispheres = [\"Northern\", \"Southern\"];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Content, {\n      hemispheres: hemispheres,\n      selectedHemisphere: this.state.selectedHemisphere,\n      changeHemisphere: this.changeHemisphere,\n      bugs: this.state.bugs,\n      fish: this.state.fish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/daniel/Projects/critter-catcher/src/App.js"],"names":["React","Component","Header","Content","Footer","App","constructor","props","getFish","response","fetch","body","json","status","Error","message","getBugs","getDate","state","currentTime","toISOString","console","log","getCurrentFish","fish","bugs","selectedHemisphere","Date","changeHemisphere","newHemisphere","setState","componentDidMount","then","res","catch","err","date","render","map","name","bug","hemispheres"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fish: [],\n      bugs: [],\n      selectedHemisphere: \"Northern\",\n      currentTime: new Date(),\n    };\n\n    this.changeHemisphere = (newHemisphere) => {\n      this.setState({\n        selectedHemisphere: newHemisphere,\n      });\n    };\n  }\n\n  getFish = async () => {\n    const response = await fetch(\"/critters/fish\");\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    return body;\n  };\n\n  getBugs = async () => {\n    const response = await fetch(\"/critters/bugs\");\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    return body;\n  };\n\n  getDate = async () => {\n    const response = await fetch(`/critters/fish/current?date=${this.state.currentTime.toISOString()}`);\n    console.log(response.json());\n  }\n\n  getCurrentFish = async () => {\n    const response = await fetch(`/critters/fish/current?date=${this.state.currentTime.toISOString()}`);\n    console.log(response.json());\n  }\n\n  componentDidMount() {\n    this.getFish()\n      .then((res) => this.setState({ fish: res }))\n      .catch((err) => console.log(err));\n\n    this.getBugs()\n      .then((res) => this.setState({ bugs: res }))\n      .catch((err) => console.log(err));\n\n    let date = new Date();\n    this.setState({\n      currentTime: date,\n    });\n\n    this.getDate()\n    .then((res) => console.log(res));\n  }\n\n  render() {\n    const fish = this.state.fish.map((fish) => {\n      return <div>{fish.name}</div>;\n    });\n\n    const bugs = this.state.bugs.map((bug) => {\n      return <div>{bug.name}</div>;\n    });\n\n    const hemispheres = [\"Northern\", \"Southern\"];\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"App-content\">\n          <Content\n            hemispheres={hemispheres}\n            selectedHemisphere={this.state.selectedHemisphere}\n            changeHemisphere={this.changeHemisphere}\n            bugs={this.state.bugs}\n            fish={this.state.fish}\n          />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
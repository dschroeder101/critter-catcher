{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Projects/critter-catcher/src/App.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCurrentFish = async () => {\n      const month = this.state.currentTime.toLocaleString(\"default\", {\n        month: \"long\"\n      });\n      const hour = this.state.currentTime.getHours();\n      const response = await fetch(`/critters/fish/${this.state.selectedHemisphere}/${month}/${hour}`);\n      const body = await response.json();\n      return body;\n    };\n\n    this.getCurrentBugs = async () => {\n      const month = this.state.currentTime.toLocaleString(\"default\", {\n        month: \"long\"\n      });\n      const hour = this.state.currentTime.getHours();\n      const response = await fetch(`/critters/bugs/${this.state.selectedHemisphere}/${month}/${hour}`);\n      const body = await response.json();\n      return body;\n    };\n\n    this.updateCritters = () => {\n      this.getCurrentFish().then(res => this.setState({\n        fish: res\n      })).catch(err => console.log(err));\n      this.getCurrentBugs().then(res => this.setState({\n        bugs: res\n      })).catch(err => console.log(err));\n    };\n\n    this.state = {\n      fish: [],\n      bugs: [],\n      selectedHemisphere: \"North\",\n      currentTime: new Date(),\n      optimalFishingLocation: \"\",\n      optimalFishingPrice: 0\n    };\n\n    this.changeHemisphere = newHemisphere => {\n      this.setState({\n        selectedHemisphere: newHemisphere\n      }, () => {\n        this.updateCritters();\n      });\n    };\n  }\n\n  calculateBestFishingLocation() {\n    let locationMap = new Map();\n    this.state.fish.map(fish => {\n      if (locationMap.has(fish.location)) {\n        let existingLocation = locationMap.get(fish.location);\n        existingLocation.totalValue += existingLocation.totalValue + fish.price;\n        existingLocation.numberOfFish++;\n        locationMap.set(fish.location, existingLocation);\n      } else {\n        locationMap.set(fish.location, {\n          totalValue: fish.price,\n          numberOfFish: 1\n        });\n      }\n\n      let maxAverage = 0;\n      let maxLocation = \"\";\n\n      for (let [key, value] of locationMap.entries()) {\n        if (value.totalValue / value.numberOfFish > maxAverage) {\n          maxAverage = value.totalValue / value.numberOfFish;\n          maxLocation = key;\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.getCurrentFish().then(res => this.setState({\n      fish: res\n    })).catch(err => console.log(err));\n    this.getCurrentBugs().then(res => this.setState({\n      bugs: res\n    })).catch(err => console.log(err));\n  }\n\n  render() {\n    const hemispheres = [\"North\", \"South\"];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Content, {\n      hemispheres: hemispheres,\n      selectedHemisphere: this.state.selectedHemisphere,\n      changeHemisphere: this.changeHemisphere,\n      bugs: this.state.bugs,\n      fish: this.state.fish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/daniel/Projects/critter-catcher/src/App.js"],"names":["React","Component","Header","Content","Footer","App","constructor","props","getCurrentFish","month","state","currentTime","toLocaleString","hour","getHours","response","fetch","selectedHemisphere","body","json","getCurrentBugs","updateCritters","then","res","setState","fish","catch","err","console","log","bugs","Date","optimalFishingLocation","optimalFishingPrice","changeHemisphere","newHemisphere","calculateBestFishingLocation","locationMap","Map","map","has","location","existingLocation","get","totalValue","price","numberOfFish","set","maxAverage","maxLocation","key","value","entries","componentDidMount","render","hemispheres"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fish: [],\n      bugs: [],\n      selectedHemisphere: \"North\",\n      currentTime: new Date(),\n      optimalFishingLocation: \"\",\n      optimalFishingPrice: 0,\n    };\n\n    this.changeHemisphere = (newHemisphere) => {\n      this.setState(\n        {\n          selectedHemisphere: newHemisphere,\n        },\n        () => {\n          this.updateCritters();\n        }\n      );\n    };\n  }\n\n  getCurrentFish = async () => {\n    const month = this.state.currentTime.toLocaleString(\"default\", {\n      month: \"long\",\n    });\n    const hour = this.state.currentTime.getHours();\n    const response = await fetch(\n      `/critters/fish/${this.state.selectedHemisphere}/${month}/${hour}`\n    );\n    const body = await response.json();\n    return body;\n  };\n\n  getCurrentBugs = async () => {\n    const month = this.state.currentTime.toLocaleString(\"default\", {\n      month: \"long\",\n    });\n    const hour = this.state.currentTime.getHours();\n    const response = await fetch(\n      `/critters/bugs/${this.state.selectedHemisphere}/${month}/${hour}`\n    );\n    const body = await response.json();\n    return body;\n  };\n\n  updateCritters = () => {\n    this.getCurrentFish()\n      .then((res) => this.setState({ fish: res }))\n      .catch((err) => console.log(err));\n\n    this.getCurrentBugs()\n      .then((res) => this.setState({ bugs: res }))\n      .catch((err) => console.log(err));\n  };\n\n  calculateBestFishingLocation() {\n    let locationMap = new Map();\n\n    this.state.fish.map((fish) => {\n      if (locationMap.has(fish.location)) {\n        let existingLocation = locationMap.get(fish.location);\n        existingLocation.totalValue += existingLocation.totalValue + fish.price;\n        existingLocation.numberOfFish++;\n        locationMap.set(fish.location, existingLocation);\n      } else {\n        locationMap.set(fish.location, {\n          totalValue: fish.price,\n          numberOfFish: 1,\n        });\n      }\n\n      let maxAverage = 0;\n      let maxLocation = \"\";\n\n      for (let [key, value] of locationMap.entries()) {\n        if (value.totalValue / value.numberOfFish > maxAverage) {\n          maxAverage = value.totalValue / value.numberOfFish;\n          maxLocation = key;\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.getCurrentFish()\n      .then((res) => this.setState({ fish: res }))\n      .catch((err) => console.log(err));\n\n    this.getCurrentBugs()\n      .then((res) => this.setState({ bugs: res }))\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    const hemispheres = [\"North\", \"South\"];\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"App-content\">\n          <Content\n            hemispheres={hemispheres}\n            selectedHemisphere={this.state.selectedHemisphere}\n            changeHemisphere={this.changeHemisphere}\n            bugs={this.state.bugs}\n            fish={this.state.fish}\n          />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nvar commands = require('redis-commands');\n\nvar Multi = require('./multi');\n\nvar RedisClient = require('../').RedisClient;\n\nvar Command = require('./command');\n\nvar addCommand = function addCommand(command) {\n  // Some rare Redis commands use special characters in their command name\n  // Convert those to a underscore to prevent using invalid function names\n  var commandName = command.replace(/(?:^([0-9])|[^a-zA-Z0-9_$])/g, '_$1'); // Do not override existing functions\n\n  if (!RedisClient.prototype[command]) {\n    RedisClient.prototype[command.toUpperCase()] = RedisClient.prototype[command] = function () {\n      var arr;\n      var len = arguments.length;\n      var callback;\n      var i = 0;\n\n      if (Array.isArray(arguments[0])) {\n        arr = arguments[0];\n\n        if (len === 2) {\n          callback = arguments[1];\n        }\n      } else if (len > 1 && Array.isArray(arguments[1])) {\n        if (len === 3) {\n          callback = arguments[2];\n        }\n\n        len = arguments[1].length;\n        arr = new Array(len + 1);\n        arr[0] = arguments[0];\n\n        for (; i < len; i += 1) {\n          arr[i + 1] = arguments[1][i];\n        }\n      } else {\n        // The later should not be the average use case\n        if (len !== 0 && (typeof arguments[len - 1] === 'function' || typeof arguments[len - 1] === 'undefined')) {\n          len--;\n          callback = arguments[len];\n        }\n\n        arr = new Array(len);\n\n        for (; i < len; i += 1) {\n          arr[i] = arguments[i];\n        }\n      }\n\n      return this.internal_send_command(new Command(command, arr, callback));\n    }; // Alias special function names (e.g. NR.RUN becomes NR_RUN and nr_run)\n\n\n    if (commandName !== command) {\n      RedisClient.prototype[commandName.toUpperCase()] = RedisClient.prototype[commandName] = RedisClient.prototype[command];\n    }\n\n    Object.defineProperty(RedisClient.prototype[command], 'name', {\n      value: commandName\n    });\n  } // Do not override existing functions\n\n\n  if (!Multi.prototype[command]) {\n    Multi.prototype[command.toUpperCase()] = Multi.prototype[command] = function () {\n      var arr;\n      var len = arguments.length;\n      var callback;\n      var i = 0;\n\n      if (Array.isArray(arguments[0])) {\n        arr = arguments[0];\n\n        if (len === 2) {\n          callback = arguments[1];\n        }\n      } else if (len > 1 && Array.isArray(arguments[1])) {\n        if (len === 3) {\n          callback = arguments[2];\n        }\n\n        len = arguments[1].length;\n        arr = new Array(len + 1);\n        arr[0] = arguments[0];\n\n        for (; i < len; i += 1) {\n          arr[i + 1] = arguments[1][i];\n        }\n      } else {\n        // The later should not be the average use case\n        if (len !== 0 && (typeof arguments[len - 1] === 'function' || typeof arguments[len - 1] === 'undefined')) {\n          len--;\n          callback = arguments[len];\n        }\n\n        arr = new Array(len);\n\n        for (; i < len; i += 1) {\n          arr[i] = arguments[i];\n        }\n      }\n\n      this.queue.push(new Command(command, arr, callback));\n      return this;\n    }; // Alias special function names (e.g. NR.RUN becomes NR_RUN and nr_run)\n\n\n    if (commandName !== command) {\n      Multi.prototype[commandName.toUpperCase()] = Multi.prototype[commandName] = Multi.prototype[command];\n    }\n\n    Object.defineProperty(Multi.prototype[command], 'name', {\n      value: commandName\n    });\n  }\n};\n\ncommands.list.forEach(addCommand);\nmodule.exports = addCommand;","map":{"version":3,"sources":["/home/daniel/Projects/critter-catcher/node_modules/redis/lib/commands.js"],"names":["commands","require","Multi","RedisClient","Command","addCommand","command","commandName","replace","prototype","toUpperCase","arr","len","arguments","length","callback","i","Array","isArray","internal_send_command","Object","defineProperty","value","queue","push","list","forEach","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar commands = require('redis-commands');\nvar Multi = require('./multi');\nvar RedisClient = require('../').RedisClient;\nvar Command = require('./command');\n\nvar addCommand = function (command) {\n    // Some rare Redis commands use special characters in their command name\n    // Convert those to a underscore to prevent using invalid function names\n    var commandName = command.replace(/(?:^([0-9])|[^a-zA-Z0-9_$])/g, '_$1');\n\n    // Do not override existing functions\n    if (!RedisClient.prototype[command]) {\n        RedisClient.prototype[command.toUpperCase()] = RedisClient.prototype[command] = function () {\n            var arr;\n            var len = arguments.length;\n            var callback;\n            var i = 0;\n            if (Array.isArray(arguments[0])) {\n                arr = arguments[0];\n                if (len === 2) {\n                    callback = arguments[1];\n                }\n            } else if (len > 1 && Array.isArray(arguments[1])) {\n                if (len === 3) {\n                    callback = arguments[2];\n                }\n                len = arguments[1].length;\n                arr = new Array(len + 1);\n                arr[0] = arguments[0];\n                for (; i < len; i += 1) {\n                    arr[i + 1] = arguments[1][i];\n                }\n            } else {\n                // The later should not be the average use case\n                if (len !== 0 && (typeof arguments[len - 1] === 'function' || typeof arguments[len - 1] === 'undefined')) {\n                    len--;\n                    callback = arguments[len];\n                }\n                arr = new Array(len);\n                for (; i < len; i += 1) {\n                    arr[i] = arguments[i];\n                }\n            }\n            return this.internal_send_command(new Command(command, arr, callback));\n        };\n        // Alias special function names (e.g. NR.RUN becomes NR_RUN and nr_run)\n        if (commandName !== command) {\n            RedisClient.prototype[commandName.toUpperCase()] = RedisClient.prototype[commandName] = RedisClient.prototype[command];\n        }\n        Object.defineProperty(RedisClient.prototype[command], 'name', {\n            value: commandName\n        });\n    }\n\n    // Do not override existing functions\n    if (!Multi.prototype[command]) {\n        Multi.prototype[command.toUpperCase()] = Multi.prototype[command] = function () {\n            var arr;\n            var len = arguments.length;\n            var callback;\n            var i = 0;\n            if (Array.isArray(arguments[0])) {\n                arr = arguments[0];\n                if (len === 2) {\n                    callback = arguments[1];\n                }\n            } else if (len > 1 && Array.isArray(arguments[1])) {\n                if (len === 3) {\n                    callback = arguments[2];\n                }\n                len = arguments[1].length;\n                arr = new Array(len + 1);\n                arr[0] = arguments[0];\n                for (; i < len; i += 1) {\n                    arr[i + 1] = arguments[1][i];\n                }\n            } else {\n                // The later should not be the average use case\n                if (len !== 0 && (typeof arguments[len - 1] === 'function' || typeof arguments[len - 1] === 'undefined')) {\n                    len--;\n                    callback = arguments[len];\n                }\n                arr = new Array(len);\n                for (; i < len; i += 1) {\n                    arr[i] = arguments[i];\n                }\n            }\n            this.queue.push(new Command(command, arr, callback));\n            return this;\n        };\n        // Alias special function names (e.g. NR.RUN becomes NR_RUN and nr_run)\n        if (commandName !== command) {\n            Multi.prototype[commandName.toUpperCase()] = Multi.prototype[commandName] = Multi.prototype[command];\n        }\n        Object.defineProperty(Multi.prototype[command], 'name', {\n            value: commandName\n        });\n    }\n};\n\ncommands.list.forEach(addCommand);\n\nmodule.exports = addCommand;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n/**\n * Custom implementation of a double ended queue.\n */\n\nfunction Denque(array) {\n  this._head = 0;\n  this._tail = 0;\n  this._capacityMask = 0x3;\n  this._list = new Array(4);\n\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\n\n\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index; // expect a number or return undefined\n\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = this._head + i & this._capacityMask;\n  return this._list[i];\n};\n/**\n * Alias for peakAt()\n * @param i\n * @returns {*}\n */\n\n\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\n\n\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n/**\n * Alias for peek()\n * @returns {*}\n */\n\n\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\n\n\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\n\n\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\n\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\n\n\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.size();\n  var len = this._list.length;\n  this._head = this._head - 1 + len & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\n\n\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = head + 1 & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\n\n\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = tail + 1 & this._capacityMask;\n\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\n\n\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = tail - 1 + len & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\n\n\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index; // expect a number or return undefined\n\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = this._head + i & this._capacityMask;\n  var item = this._list[i];\n  var k;\n\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = i - 1 + len & this._capacityMask];\n    }\n\n    this._list[i] = void 0;\n    this._head = this._head + 1 + len & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = i + 1 + len & this._capacityMask];\n    }\n\n    this._list[i] = void 0;\n    this._tail = this._tail - 1 + len & this._capacityMask;\n  }\n\n  return item;\n};\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\n\n\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count; // expect a number or return undefined\n\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[this._head + i + k & this._capacityMask];\n  }\n\n  i = this._head + i & this._capacityMask;\n\n  if (index + count === size) {\n    this._tail = this._tail - count + len & this._capacityMask;\n\n    for (k = count; k > 0; k--) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n    }\n\n    return removed;\n  }\n\n  if (index === 0) {\n    this._head = this._head + count + len & this._capacityMask;\n\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n    }\n\n    return removed;\n  }\n\n  if (i < size / 2) {\n    this._head = this._head + index + count + len & this._capacityMask;\n\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = i - 1 + len & this._capacityMask]);\n    }\n\n    i = this._head - 1 + len & this._capacityMask;\n\n    while (del_count > 0) {\n      this._list[i = i - 1 + len & this._capacityMask] = void 0;\n      del_count--;\n    }\n\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = i + count + len & this._capacityMask;\n\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n\n    i = this._tail;\n\n    while (del_count > 0) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\n\n\nDenque.prototype.splice = function splice(index, count) {\n  var i = index; // expect a number or return undefined\n\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[this._head + k & this._capacityMask];\n      }\n\n      if (count === 0) {\n        removed = [];\n\n        if (i > 0) {\n          this._head = this._head + i + len & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = this._head + i + len & this._capacityMask;\n      }\n\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[this._head + i + count + k & this._capacityMask];\n      }\n\n      if (count === 0) {\n        removed = [];\n\n        if (i != size) {\n          this._tail = this._head + i + len & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = this._tail - leng + len & this._capacityMask;\n      }\n\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n/**\n * Soft clear - does not reset capacity.\n */\n\n\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\n\n\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\n\n\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\n\n\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\n\n\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n\n  return newArray;\n};\n/**\n * Grows the internal list array.\n * @private\n */\n\n\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  } // head is at 0 and array is now full, safe to extend\n\n\n  this._tail = this._list.length;\n  this._list.length *= 2;\n  this._capacityMask = this._capacityMask << 1 | 1;\n};\n/**\n * Shrinks the internal list array.\n * @private\n */\n\n\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\nmodule.exports = Denque;","map":{"version":3,"sources":["/home/daniel/Projects/critter-catcher/node_modules/denque/index.js"],"names":["Denque","array","_head","_tail","_capacityMask","_list","Array","isArray","_fromArray","prototype","peekAt","index","i","len","size","undefined","get","peek","peekFront","peekBack","Object","defineProperty","length","unshift","item","_growArray","shift","head","_shrinkArray","push","tail","pop","removeOne","k","remove","count","removed","del_count","toArray","clear","splice","arguments","temp","arg_len","arguments_index","leng","isEmpty","_copyArray","fullCopy","newArray","list","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array) {\n  this._head = 0;\n  this._tail = 0;\n  this._capacityMask = 0x3;\n  this._list = new Array(4);\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peakAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (i < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n  return newArray;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  }\n\n  // head is at 0 and array is now full, safe to extend\n  this._tail = this._list.length;\n\n  this._list.length *= 2;\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n\nmodule.exports = Denque;\n"]},"metadata":{},"sourceType":"script"}
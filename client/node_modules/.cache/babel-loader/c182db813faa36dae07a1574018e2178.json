{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Projects/critter-catcher/src/App.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport HemisphereSelector from \"./components/HemisphereSelector\";\nimport CritterSelector from \"./components/CritterSelector\";\nimport FishingLocations from \"./components/FishingLocationTable\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCurrentFish = async () => {\n      const month = this.state.currentTime.toLocaleString(\"default\", {\n        month: \"long\"\n      });\n      const hour = this.state.currentTime.getHours();\n      const response = await fetch(`/critters/fish/${this.state.selectedHemisphere}/${month}/${hour}`);\n      const body = await response.json();\n      return body;\n    };\n\n    this.getCurrentBugs = async () => {\n      const month = this.state.currentTime.toLocaleString(\"default\", {\n        month: \"long\"\n      });\n      const hour = this.state.currentTime.getHours();\n      const response = await fetch(`/critters/bugs/${this.state.selectedHemisphere}/${month}/${hour}`);\n      const body = await response.json();\n      return body;\n    };\n\n    this.updateCritters = () => {\n      this.getCurrentFish().then(res => this.handleFishUpdate(res)).catch(err => console.log(err));\n      this.getCurrentBugs().then(res => this.handleBugUpdate(res)).catch(err => console.log(err));\n    };\n\n    this.state = {\n      fish: [],\n      bugs: [],\n      selectedHemisphere: \"North\",\n      selectedCritter: \"Fish\",\n      currentTime: new Date(),\n      lastRetrieval: 0,\n      fishingLocations: new Map()\n    };\n\n    this.changeHemisphere = newHemisphere => {\n      this.setState({\n        selectedHemisphere: newHemisphere\n      }, () => {\n        this.updateCritters();\n      });\n    };\n\n    this.changeCritter = newCritter => {\n      {\n        this.setState({\n          selectedCritter: newCritter\n        });\n      }\n    };\n  }\n\n  handleFishUpdate(fish) {\n    this.setState({\n      fish: fish\n    }, () => {\n      this.calculateFishingLocations();\n    });\n  }\n\n  handleBugUpdate(bugs) {\n    this.setState({\n      bugs: bugs\n    }, () => {\n      console.log(\"Results: \" + this.state.bugs.length);\n    });\n  }\n\n  calculateFishingLocations() {\n    let locationMap = new Map();\n    this.state.fish.map(fish => {\n      fish.locations.map(location => {\n        if (locationMap.has(location)) {\n          locationMap.get(location).totalValue += fish.price;\n          locationMap.get(location).numberOfFish++;\n        } else {\n          locationMap.set(location, {\n            totalValue: fish.price,\n            numberOfFish: 1\n          });\n        }\n      });\n    });\n    this.setState({\n      fishingLocations: locationMap\n    });\n  }\n\n  componentDidMount() {\n    this.updateCritters();\n  }\n\n  render() {\n    const hemispheres = [\"North\", \"South\"];\n    const critters = [\"Fish\", \"Bugs\"];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HemisphereSelector, {\n      changeHemisphere: this.changeHemisphere,\n      selectedHemisphere: this.state.selectedHemisphere,\n      hemispheres: hemispheres,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(CritterSelector, {\n      changeCritter: this.changeCritter,\n      selectedCritter: this.state.selectedCritter,\n      critters: critters,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FishingLocations, {\n      locations: this.state.fishingLocations,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Content, {\n      selectedCritter: this.state.selectedCritter,\n      bugs: this.state.bugs,\n      fish: this.state.fish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/daniel/Projects/critter-catcher/src/App.js"],"names":["React","Component","Header","HemisphereSelector","CritterSelector","FishingLocations","Content","Footer","App","constructor","props","getCurrentFish","month","state","currentTime","toLocaleString","hour","getHours","response","fetch","selectedHemisphere","body","json","getCurrentBugs","updateCritters","then","res","handleFishUpdate","catch","err","console","log","handleBugUpdate","fish","bugs","selectedCritter","Date","lastRetrieval","fishingLocations","Map","changeHemisphere","newHemisphere","setState","changeCritter","newCritter","calculateFishingLocations","length","locationMap","map","locations","location","has","get","totalValue","price","numberOfFish","set","componentDidMount","render","hemispheres","critters"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport HemisphereSelector from \"./components/HemisphereSelector\";\nimport CritterSelector from \"./components/CritterSelector\";\nimport FishingLocations from \"./components/FishingLocationTable\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fish: [],\n      bugs: [],\n      selectedHemisphere: \"North\",\n      selectedCritter: \"Fish\",\n      currentTime: new Date(),\n      lastRetrieval: 0,\n      fishingLocations: new Map(),\n    };\n\n    this.changeHemisphere = (newHemisphere) => {\n      this.setState(\n        {\n          selectedHemisphere: newHemisphere,\n        },\n        () => {\n          this.updateCritters();\n        }\n      );\n    };\n\n    this.changeCritter = (newCritter) => {\n      {\n        this.setState({\n          selectedCritter: newCritter,\n        });\n      }\n    };\n  }\n\n  getCurrentFish = async () => {\n    const month = this.state.currentTime.toLocaleString(\"default\", {\n      month: \"long\",\n    });\n    const hour = this.state.currentTime.getHours();\n    const response = await fetch(\n      `/critters/fish/${this.state.selectedHemisphere}/${month}/${hour}`\n    );\n    const body = await response.json();\n    return body;\n  };\n\n  getCurrentBugs = async () => {\n    const month = this.state.currentTime.toLocaleString(\"default\", {\n      month: \"long\",\n    });\n    const hour = this.state.currentTime.getHours();\n    const response = await fetch(\n      `/critters/bugs/${this.state.selectedHemisphere}/${month}/${hour}`\n    );\n    const body = await response.json();\n    return body;\n  };\n\n  updateCritters = () => {\n    this.getCurrentFish()\n      .then((res) => this.handleFishUpdate(res))\n      .catch((err) => console.log(err));\n\n    this.getCurrentBugs()\n      .then((res) => this.handleBugUpdate(res))\n      .catch((err) => console.log(err));\n  };\n\n  handleFishUpdate(fish) {\n    this.setState({ fish: fish }, () => {\n      this.calculateFishingLocations();\n    });\n  }\n\n  handleBugUpdate(bugs) {\n    this.setState({ bugs: bugs }, () => {\n      console.log(\"Results: \" + this.state.bugs.length);\n    });\n  }\n\n  calculateFishingLocations() {\n    let locationMap = new Map();\n\n    this.state.fish.map((fish) => {\n      fish.locations.map((location) => {\n        if (locationMap.has(location)) {\n          locationMap.get(location).totalValue += fish.price;\n          locationMap.get(location).numberOfFish++;\n        } else {\n          locationMap.set(location, {\n            totalValue: fish.price,\n            numberOfFish: 1,\n          });\n        }\n      });\n    });\n\n    this.setState({\n      fishingLocations: locationMap,\n    });\n  }\n\n  componentDidMount() {\n    this.updateCritters();\n  }\n\n  render() {\n    const hemispheres = [\"North\", \"South\"];\n    const critters = [\"Fish\", \"Bugs\"];\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"App-content\">\n          <HemisphereSelector\n            changeHemisphere={this.changeHemisphere}\n            selectedHemisphere={this.state.selectedHemisphere}\n            hemispheres={hemispheres}\n          />\n          <CritterSelector\n            changeCritter={this.changeCritter}\n            selectedCritter={this.state.selectedCritter}\n            critters={critters}\n          />\n          <FishingLocations locations={this.state.fishingLocations} />\n          <Content\n            selectedCritter={this.state.selectedCritter}\n            bugs={this.state.bugs}\n            fish={this.state.fish}\n          />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
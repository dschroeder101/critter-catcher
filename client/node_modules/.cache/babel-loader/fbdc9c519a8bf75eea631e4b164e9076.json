{"ast":null,"code":"'use strict';\n\nvar commands = require('./commands.json');\n/**\n * Redis command list\n *\n * All commands are lowercased.\n *\n * @var {string[]}\n * @public\n */\n\n\nexports.list = Object.keys(commands);\nvar flags = {};\nexports.list.forEach(function (commandName) {\n  flags[commandName] = commands[commandName].flags.reduce(function (flags, flag) {\n    flags[flag] = true;\n    return flags;\n  }, {});\n});\n/**\n * Check if the command exists\n *\n * @param {string} commandName - the command name\n * @return {boolean} result\n * @public\n */\n\nexports.exists = function (commandName) {\n  return Boolean(commands[commandName]);\n};\n/**\n * Check if the command has the flag\n *\n * Some of possible flags: readonly, noscript, loading\n * @param {string} commandName - the command name\n * @param {string} flag - the flag to check\n * @return {boolean} result\n * @public\n */\n\n\nexports.hasFlag = function (commandName, flag) {\n  if (!flags[commandName]) {\n    throw new Error('Unknown command ' + commandName);\n  }\n\n  return Boolean(flags[commandName][flag]);\n};\n/**\n * Get indexes of keys in the command arguments\n *\n * @param {string} commandName - the command name\n * @param {string[]} args - the arguments of the command\n * @param {object} [options] - options\n * @param {boolean} [options.parseExternalKey] - parse external keys\n * @return {number[]} - the list of the index\n * @public\n *\n * @example\n * ```javascript\n * getKeyIndexes('set', ['key', 'value']) // [0]\n * getKeyIndexes('mget', ['key1', 'key2']) // [0, 1]\n * ```\n */\n\n\nexports.getKeyIndexes = function (commandName, args, options) {\n  var command = commands[commandName];\n\n  if (!command) {\n    throw new Error('Unknown command ' + commandName);\n  }\n\n  if (!Array.isArray(args)) {\n    throw new Error('Expect args to be an array');\n  }\n\n  var keys = [];\n  var i, keyStart, keyStop, parseExternalKey;\n\n  switch (commandName) {\n    case 'zunionstore':\n    case 'zinterstore':\n      keys.push(0);\n    // fall through\n\n    case 'eval':\n    case 'evalsha':\n      keyStop = Number(args[1]) + 2;\n\n      for (i = 2; i < keyStop; i++) {\n        keys.push(i);\n      }\n\n      break;\n\n    case 'sort':\n      parseExternalKey = options && options.parseExternalKey;\n      keys.push(0);\n\n      for (i = 1; i < args.length - 1; i++) {\n        if (typeof args[i] !== 'string') {\n          continue;\n        }\n\n        var directive = args[i].toUpperCase();\n\n        if (directive === 'GET') {\n          i += 1;\n\n          if (args[i] !== '#') {\n            if (parseExternalKey) {\n              keys.push([i, getExternalKeyNameLength(args[i])]);\n            } else {\n              keys.push(i);\n            }\n          }\n        } else if (directive === 'BY') {\n          i += 1;\n\n          if (parseExternalKey) {\n            keys.push([i, getExternalKeyNameLength(args[i])]);\n          } else {\n            keys.push(i);\n          }\n        } else if (directive === 'STORE') {\n          i += 1;\n          keys.push(i);\n        }\n      }\n\n      break;\n\n    case 'migrate':\n      if (args[2] === '') {\n        for (i = 5; i < args.length - 1; i++) {\n          if (args[i].toUpperCase() === 'KEYS') {\n            for (var j = i + 1; j < args.length; j++) {\n              keys.push(j);\n            }\n\n            break;\n          }\n        }\n      } else {\n        keys.push(2);\n      }\n\n      break;\n\n    case 'xreadgroup':\n    case 'xread':\n      // Keys are 1st half of the args after STREAMS argument.\n      for (i = commandName === 'xread' ? 0 : 3; i < args.length - 1; i++) {\n        if (String(args[i]).toUpperCase() === 'STREAMS') {\n          for (j = i + 1; j <= i + (args.length - 1 - i) / 2; j++) {\n            keys.push(j);\n          }\n\n          break;\n        }\n      }\n\n      break;\n\n    default:\n      // Step has to be at least one in this case, otherwise the command does\n      // not contain a key.\n      if (command.step > 0) {\n        keyStart = command.keyStart - 1;\n        keyStop = command.keyStop > 0 ? command.keyStop : args.length + command.keyStop + 1;\n\n        for (i = keyStart; i < keyStop; i += command.step) {\n          keys.push(i);\n        }\n      }\n\n      break;\n  }\n\n  return keys;\n};\n\nfunction getExternalKeyNameLength(key) {\n  if (typeof key !== 'string') {\n    key = String(key);\n  }\n\n  var hashPos = key.indexOf('->');\n  return hashPos === -1 ? key.length : hashPos;\n}","map":{"version":3,"sources":["/home/daniel/Projects/critter-catcher/node_modules/redis-commands/index.js"],"names":["commands","require","exports","list","Object","keys","flags","forEach","commandName","reduce","flag","exists","Boolean","hasFlag","Error","getKeyIndexes","args","options","command","Array","isArray","i","keyStart","keyStop","parseExternalKey","push","Number","length","directive","toUpperCase","getExternalKeyNameLength","j","String","step","key","hashPos","indexOf"],"mappings":"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","sourcesContent":["'use strict'\n\nvar commands = require('./commands.json')\n\n/**\n * Redis command list\n *\n * All commands are lowercased.\n *\n * @var {string[]}\n * @public\n */\nexports.list = Object.keys(commands)\n\nvar flags = {}\nexports.list.forEach(function (commandName) {\n  flags[commandName] = commands[commandName].flags.reduce(function (flags, flag) {\n    flags[flag] = true\n    return flags\n  }, {})\n})\n/**\n * Check if the command exists\n *\n * @param {string} commandName - the command name\n * @return {boolean} result\n * @public\n */\nexports.exists = function (commandName) {\n  return Boolean(commands[commandName])\n}\n\n/**\n * Check if the command has the flag\n *\n * Some of possible flags: readonly, noscript, loading\n * @param {string} commandName - the command name\n * @param {string} flag - the flag to check\n * @return {boolean} result\n * @public\n */\nexports.hasFlag = function (commandName, flag) {\n  if (!flags[commandName]) {\n    throw new Error('Unknown command ' + commandName)\n  }\n\n  return Boolean(flags[commandName][flag])\n}\n\n/**\n * Get indexes of keys in the command arguments\n *\n * @param {string} commandName - the command name\n * @param {string[]} args - the arguments of the command\n * @param {object} [options] - options\n * @param {boolean} [options.parseExternalKey] - parse external keys\n * @return {number[]} - the list of the index\n * @public\n *\n * @example\n * ```javascript\n * getKeyIndexes('set', ['key', 'value']) // [0]\n * getKeyIndexes('mget', ['key1', 'key2']) // [0, 1]\n * ```\n */\nexports.getKeyIndexes = function (commandName, args, options) {\n  var command = commands[commandName]\n  if (!command) {\n    throw new Error('Unknown command ' + commandName)\n  }\n\n  if (!Array.isArray(args)) {\n    throw new Error('Expect args to be an array')\n  }\n\n  var keys = []\n  var i, keyStart, keyStop, parseExternalKey\n  switch (commandName) {\n    case 'zunionstore':\n    case 'zinterstore':\n      keys.push(0)\n    // fall through\n    case 'eval':\n    case 'evalsha':\n      keyStop = Number(args[1]) + 2\n      for (i = 2; i < keyStop; i++) {\n        keys.push(i)\n      }\n      break\n    case 'sort':\n      parseExternalKey = options && options.parseExternalKey\n      keys.push(0)\n      for (i = 1; i < args.length - 1; i++) {\n        if (typeof args[i] !== 'string') {\n          continue\n        }\n        var directive = args[i].toUpperCase()\n        if (directive === 'GET') {\n          i += 1\n          if (args[i] !== '#') {\n            if (parseExternalKey) {\n              keys.push([i, getExternalKeyNameLength(args[i])])\n            } else {\n              keys.push(i)\n            }\n          }\n        } else if (directive === 'BY') {\n          i += 1\n          if (parseExternalKey) {\n            keys.push([i, getExternalKeyNameLength(args[i])])\n          } else {\n            keys.push(i)\n          }\n        } else if (directive === 'STORE') {\n          i += 1\n          keys.push(i)\n        }\n      }\n      break\n    case 'migrate':\n      if (args[2] === '') {\n        for (i = 5; i < args.length - 1; i++) {\n          if (args[i].toUpperCase() === 'KEYS') {\n            for (var j = i + 1; j < args.length; j++) {\n              keys.push(j)\n            }\n            break\n          }\n        }\n      } else {\n        keys.push(2)\n      }\n      break\n    case 'xreadgroup':\n    case 'xread':\n      // Keys are 1st half of the args after STREAMS argument.\n      for (i = commandName === 'xread' ? 0 : 3; i < args.length - 1; i++) {\n        if (String(args[i]).toUpperCase() === 'STREAMS') {\n          for (j = i + 1; j <= i + ((args.length - 1 - i) / 2); j++) {\n            keys.push(j)\n          }\n          break\n        }\n      }\n      break\n    default:\n      // Step has to be at least one in this case, otherwise the command does\n      // not contain a key.\n      if (command.step > 0) {\n        keyStart = command.keyStart - 1\n        keyStop = command.keyStop > 0 ? command.keyStop : args.length + command.keyStop + 1\n        for (i = keyStart; i < keyStop; i += command.step) {\n          keys.push(i)\n        }\n      }\n      break\n  }\n\n  return keys\n}\n\nfunction getExternalKeyNameLength (key) {\n  if (typeof key !== 'string') {\n    key = String(key)\n  }\n  var hashPos = key.indexOf('->')\n  return hashPos === -1 ? key.length : hashPos\n}\n"]},"metadata":{},"sourceType":"script"}
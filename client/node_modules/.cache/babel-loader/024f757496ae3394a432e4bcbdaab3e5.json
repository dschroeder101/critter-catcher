{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\nclass RedisError extends Error {\n  get name() {\n    return this.constructor.name;\n  }\n\n}\n\nclass ParserError extends RedisError {\n  constructor(message, buffer, offset) {\n    assert(buffer);\n    assert.strictEqual(typeof offset, 'number');\n    const tmp = Error.stackTraceLimit;\n    Error.stackTraceLimit = 2;\n    super(message);\n    Error.stackTraceLimit = tmp;\n    this.offset = offset;\n    this.buffer = buffer;\n  }\n\n  get name() {\n    return this.constructor.name;\n  }\n\n}\n\nclass ReplyError extends RedisError {\n  constructor(message) {\n    const tmp = Error.stackTraceLimit;\n    Error.stackTraceLimit = 2;\n    super(message);\n    Error.stackTraceLimit = tmp;\n  }\n\n  get name() {\n    return this.constructor.name;\n  }\n\n}\n\nclass AbortError extends RedisError {\n  get name() {\n    return this.constructor.name;\n  }\n\n}\n\nclass InterruptError extends AbortError {\n  get name() {\n    return this.constructor.name;\n  }\n\n}\n\nmodule.exports = {\n  RedisError,\n  ParserError,\n  ReplyError,\n  AbortError,\n  InterruptError\n};","map":{"version":3,"sources":["/home/daniel/Projects/critter-catcher/node_modules/redis-errors/lib/modern.js"],"names":["assert","require","RedisError","Error","name","constructor","ParserError","message","buffer","offset","strictEqual","tmp","stackTraceLimit","ReplyError","AbortError","InterruptError","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,UAAN,SAAyBC,KAAzB,CAA+B;AAC7B,MAAIC,IAAJ,GAAY;AACV,WAAO,KAAKC,WAAL,CAAiBD,IAAxB;AACD;;AAH4B;;AAM/B,MAAME,WAAN,SAA0BJ,UAA1B,CAAqC;AACnCG,EAAAA,WAAW,CAAEE,OAAF,EAAWC,MAAX,EAAmBC,MAAnB,EAA2B;AACpCT,IAAAA,MAAM,CAACQ,MAAD,CAAN;AACAR,IAAAA,MAAM,CAACU,WAAP,CAAmB,OAAOD,MAA1B,EAAkC,QAAlC;AAEA,UAAME,GAAG,GAAGR,KAAK,CAACS,eAAlB;AACAT,IAAAA,KAAK,CAACS,eAAN,GAAwB,CAAxB;AACA,UAAML,OAAN;AACAJ,IAAAA,KAAK,CAACS,eAAN,GAAwBD,GAAxB;AACA,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKD,MAAL,GAAcA,MAAd;AACD;;AAED,MAAIJ,IAAJ,GAAY;AACV,WAAO,KAAKC,WAAL,CAAiBD,IAAxB;AACD;;AAfkC;;AAkBrC,MAAMS,UAAN,SAAyBX,UAAzB,CAAoC;AAClCG,EAAAA,WAAW,CAAEE,OAAF,EAAW;AACpB,UAAMI,GAAG,GAAGR,KAAK,CAACS,eAAlB;AACAT,IAAAA,KAAK,CAACS,eAAN,GAAwB,CAAxB;AACA,UAAML,OAAN;AACAJ,IAAAA,KAAK,CAACS,eAAN,GAAwBD,GAAxB;AACD;;AACD,MAAIP,IAAJ,GAAY;AACV,WAAO,KAAKC,WAAL,CAAiBD,IAAxB;AACD;;AATiC;;AAYpC,MAAMU,UAAN,SAAyBZ,UAAzB,CAAoC;AAClC,MAAIE,IAAJ,GAAY;AACV,WAAO,KAAKC,WAAL,CAAiBD,IAAxB;AACD;;AAHiC;;AAMpC,MAAMW,cAAN,SAA6BD,UAA7B,CAAwC;AACtC,MAAIV,IAAJ,GAAY;AACV,WAAO,KAAKC,WAAL,CAAiBD,IAAxB;AACD;;AAHqC;;AAMxCY,MAAM,CAACC,OAAP,GAAiB;AACff,EAAAA,UADe;AAEfI,EAAAA,WAFe;AAGfO,EAAAA,UAHe;AAIfC,EAAAA,UAJe;AAKfC,EAAAA;AALe,CAAjB","sourcesContent":["'use strict'\n\nconst assert = require('assert')\n\nclass RedisError extends Error {\n  get name () {\n    return this.constructor.name\n  }\n}\n\nclass ParserError extends RedisError {\n  constructor (message, buffer, offset) {\n    assert(buffer)\n    assert.strictEqual(typeof offset, 'number')\n\n    const tmp = Error.stackTraceLimit\n    Error.stackTraceLimit = 2\n    super(message)\n    Error.stackTraceLimit = tmp\n    this.offset = offset\n    this.buffer = buffer\n  }\n\n  get name () {\n    return this.constructor.name\n  }\n}\n\nclass ReplyError extends RedisError {\n  constructor (message) {\n    const tmp = Error.stackTraceLimit\n    Error.stackTraceLimit = 2\n    super(message)\n    Error.stackTraceLimit = tmp\n  }\n  get name () {\n    return this.constructor.name\n  }\n}\n\nclass AbortError extends RedisError {\n  get name () {\n    return this.constructor.name\n  }\n}\n\nclass InterruptError extends AbortError {\n  get name () {\n    return this.constructor.name\n  }\n}\n\nmodule.exports = {\n  RedisError,\n  ParserError,\n  ReplyError,\n  AbortError,\n  InterruptError\n}\n"]},"metadata":{},"sourceType":"script"}
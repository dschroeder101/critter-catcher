{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Projects/critter-catcher/src/App.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCurrentFish = async () => {\n      const month = this.state.currentTime.toLocaleString(\"default\", {\n        month: \"long\"\n      });\n      const hour = this.state.currentTime.getHours();\n      const response = await fetch(`/critters/fish/${this.state.selectedHemisphere}/${month}/${hour}`);\n      const body = await response.json();\n      return body;\n    };\n\n    this.getCurrentBugs = async () => {\n      const month = this.state.currentTime.toLocaleString(\"default\", {\n        month: \"long\"\n      });\n      const hour = this.state.currentTime.getHours();\n      const response = await fetch(`/critters/bugs/${this.state.selectedHemisphere}/${month}/${hour}`);\n      const body = await response.json();\n      return body;\n    };\n\n    this.updateCritters = () => {\n      this.getCurrentFish().then(res => this.handleFishUpdate(res)).catch(err => console.log(err));\n      this.getCurrentBugs().then(res => this.handleBugUpdate(res)).catch(err => console.log(err));\n    };\n\n    this.state = {\n      fish: [],\n      bugs: [],\n      selectedHemisphere: \"North\",\n      currentTime: new Date(),\n      optimalFishingLocation: \"\",\n      optimalFishingPrice: 0\n    };\n\n    this.changeHemisphere = newHemisphere => {\n      this.setState({\n        selectedHemisphere: newHemisphere\n      }, () => {\n        this.updateCritters();\n      });\n    };\n  }\n\n  handleFishUpdate(fish) {\n    this.setState({\n      fish: fish\n    }, () => {\n      this.calculateBestFishingLocation();\n    });\n  }\n\n  handleBugUpdate(bugs) {\n    this.setState({\n      bugs: bugs\n    }, () => {\n      console.log(\"Results: \" + this.state.bugs.length);\n    });\n  }\n\n  calculateBestFishingLocation() {\n    let locationMap = new Map();\n    this.state.fish.map(fish => {\n      if (locationMap.has(fish.location)) {\n        let existingLocation = locationMap.get(fish.location);\n        existingLocation.totalValue += existingLocation.totalValue + fish.price;\n        existingLocation.numberOfFish++;\n        locationMap.set(fish.location, existingLocation);\n      } else {\n        locationMap.set(fish.location, {\n          totalValue: fish.price,\n          numberOfFish: 1\n        });\n      }\n    });\n    let maxAveragePrice = 0;\n    let maxLocation = \"\";\n\n    for (let [key, value] of locationMap.entries()) {\n      if (value.totalValue / value.numberOfFish > maxAveragePrice) {\n        maxAveragePrice = value.totalValue / value.numberOfFish;\n        maxLocation = key;\n      }\n    }\n\n    console.log(maxAveragePrice);\n    console.log(maxLocation);\n    this.setState({\n      optimalFishingLocation: maxLocation,\n      optimalFishingPrice: maxAveragePrice\n    });\n  }\n\n  componentDidMount() {\n    this.updateCritters(); // this.getAllFish();\n    // this.getAllBugs();\n  }\n\n  render() {\n    const hemispheres = [\"North\", \"South\"];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HemisphereSelector, {\n      changeHemisphere: this.props.changeHemisphere,\n      selectedHemisphere: this.props.selectedHemisphere,\n      hemispheres: this.props.hemispheres,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Content, {\n      optimalFishingLocation: this.state.optimalFishingLocation,\n      optimalFishingPrice: this.state.optimalFishingPrice,\n      bugs: this.state.bugs,\n      fish: this.state.fish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/daniel/Projects/critter-catcher/src/App.js"],"names":["React","Component","Header","Content","Footer","App","constructor","props","getCurrentFish","month","state","currentTime","toLocaleString","hour","getHours","response","fetch","selectedHemisphere","body","json","getCurrentBugs","updateCritters","then","res","handleFishUpdate","catch","err","console","log","handleBugUpdate","fish","bugs","Date","optimalFishingLocation","optimalFishingPrice","changeHemisphere","newHemisphere","setState","calculateBestFishingLocation","length","locationMap","Map","map","has","location","existingLocation","get","totalValue","price","numberOfFish","set","maxAveragePrice","maxLocation","key","value","entries","componentDidMount","render","hemispheres"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fish: [],\n      bugs: [],\n      selectedHemisphere: \"North\",\n      currentTime: new Date(),\n      optimalFishingLocation: \"\",\n      optimalFishingPrice: 0,\n    };\n\n    this.changeHemisphere = (newHemisphere) => {\n      this.setState(\n        {\n          selectedHemisphere: newHemisphere,\n        },\n        () => {\n          this.updateCritters();\n        }\n      );\n    };\n  }\n\n  getCurrentFish = async () => {\n    const month = this.state.currentTime.toLocaleString(\"default\", {\n      month: \"long\",\n    });\n    const hour = this.state.currentTime.getHours();\n    const response = await fetch(\n      `/critters/fish/${this.state.selectedHemisphere}/${month}/${hour}`\n    );\n    const body = await response.json();\n    return body;\n  };\n\n  getCurrentBugs = async () => {\n    const month = this.state.currentTime.toLocaleString(\"default\", {\n      month: \"long\",\n    });\n    const hour = this.state.currentTime.getHours();\n    const response = await fetch(\n      `/critters/bugs/${this.state.selectedHemisphere}/${month}/${hour}`\n    );\n    const body = await response.json();\n    return body;\n  };\n\n  // getAllFish = async () => {\n  //   const response = await fetch(`/critters/fish`);\n  //   const body = await response.json();\n\n  //   console.log(body);\n  // };\n\n  // getAllBugs = async () => {\n  //   const response = await fetch(`/critters/bugs`);\n  //   const body = await response.json();\n\n  //   console.log(body);\n\n  //   return this.filterBugs(body);\n  // };\n\n  // filterBugs = (bugs) => {\n  //   const result = bugs.filter((this.isValid));\n  //   return result;\n  // };\n\n  // isValid = (critter) {\n  //   // if(\n  //   //   // critter is valid for the current hemisphere && has a schedule with startingTime <= currentHour &&  endingTime >= currentHour\n  //   //   critter.hemispheres\n  //   //   // OR critter is valid for current hemisphere && has a schedule with a startingTime > endingTime && startingTime <= currentHour || endingTime >= currentHour\n  //   //   // OR critter  is valid for current hemisphere && has a schedule with allDay == true\n  //   // )\n  // }\n\n  updateCritters = () => {\n    this.getCurrentFish()\n      .then((res) => this.handleFishUpdate(res))\n      .catch((err) => console.log(err));\n\n    this.getCurrentBugs()\n      .then((res) => this.handleBugUpdate(res))\n      .catch((err) => console.log(err));\n  };\n\n  handleFishUpdate(fish) {\n    this.setState({ fish: fish }, () => {\n      this.calculateBestFishingLocation();\n    });\n  }\n\n  handleBugUpdate(bugs) {\n    this.setState({ bugs: bugs }, () => {\n      console.log(\"Results: \" + this.state.bugs.length);\n    });\n  }\n\n  calculateBestFishingLocation() {\n    let locationMap = new Map();\n\n    this.state.fish.map((fish) => {\n      if (locationMap.has(fish.location)) {\n        let existingLocation = locationMap.get(fish.location);\n        existingLocation.totalValue += existingLocation.totalValue + fish.price;\n        existingLocation.numberOfFish++;\n        locationMap.set(fish.location, existingLocation);\n      } else {\n        locationMap.set(fish.location, {\n          totalValue: fish.price,\n          numberOfFish: 1,\n        });\n      }\n    });\n\n    let maxAveragePrice = 0;\n    let maxLocation = \"\";\n\n    for (let [key, value] of locationMap.entries()) {\n      if (value.totalValue / value.numberOfFish > maxAveragePrice) {\n        maxAveragePrice = value.totalValue / value.numberOfFish;\n        maxLocation = key;\n      }\n    }\n\n    console.log(maxAveragePrice);\n    console.log(maxLocation);\n\n    this.setState({\n      optimalFishingLocation: maxLocation,\n      optimalFishingPrice: maxAveragePrice,\n    });\n  }\n\n  componentDidMount() {\n    this.updateCritters();\n    // this.getAllFish();\n    // this.getAllBugs();\n  }\n\n  render() {\n    const hemispheres = [\"North\", \"South\"];\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"App-content\">\n          <HemisphereSelector\n            changeHemisphere={this.props.changeHemisphere}\n            selectedHemisphere={this.props.selectedHemisphere}\n            hemispheres={this.props.hemispheres}\n          />\n          <Content\n            optimalFishingLocation={this.state.optimalFishingLocation}\n            optimalFishingPrice={this.state.optimalFishingPrice}\n            bugs={this.state.bugs}\n            fish={this.state.fish}\n          />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
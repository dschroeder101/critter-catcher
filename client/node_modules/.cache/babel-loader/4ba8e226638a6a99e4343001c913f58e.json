{"ast":null,"code":"'use strict'; // hgetall converts its replies to an Object. If the reply is empty, null is returned.\n// These function are only called with internal data and have therefore always the same instanceof X\n\nfunction replyToObject(reply) {\n  // The reply might be a string or a buffer if this is called in a transaction (multi)\n  if (reply.length === 0 || !(reply instanceof Array)) {\n    return null;\n  }\n\n  var obj = {};\n\n  for (var i = 0; i < reply.length; i += 2) {\n    obj[reply[i].toString('binary')] = reply[i + 1];\n  }\n\n  return obj;\n}\n\nfunction replyToStrings(reply) {\n  if (reply instanceof Buffer) {\n    return reply.toString();\n  }\n\n  if (reply instanceof Array) {\n    var res = new Array(reply.length);\n\n    for (var i = 0; i < reply.length; i++) {\n      // Recusivly call the function as slowlog returns deep nested replies\n      res[i] = replyToStrings(reply[i]);\n    }\n\n    return res;\n  }\n\n  return reply;\n}\n\nfunction print(err, reply) {\n  if (err) {\n    // A error always begins with Error:\n    console.log(err.toString());\n  } else {\n    console.log('Reply: ' + reply);\n  }\n}\n\nvar camelCase; // Deep clone arbitrary objects with arrays. Can't handle cyclic structures (results in a range error)\n// Any attribute with a non primitive value besides object and array will be passed by reference (e.g. Buffers, Maps, Functions)\n// All capital letters are going to be replaced with a lower case letter and a underscore infront of it\n\nfunction clone(obj) {\n  var copy;\n\n  if (Array.isArray(obj)) {\n    copy = new Array(obj.length);\n\n    for (var i = 0; i < obj.length; i++) {\n      copy[i] = clone(obj[i]);\n    }\n\n    return copy;\n  }\n\n  if (Object.prototype.toString.call(obj) === '[object Object]') {\n    copy = {};\n    var elems = Object.keys(obj);\n    var elem;\n\n    while (elem = elems.pop()) {\n      if (elem === 'tls') {\n        // special handle tls\n        copy[elem] = obj[elem];\n        continue;\n      } // Accept camelCase options and convert them to snake_case\n\n\n      var snake_case = elem.replace(/[A-Z][^A-Z]/g, '_$&').toLowerCase(); // If camelCase is detected, pass it to the client, so all variables are going to be camelCased\n      // There are no deep nested options objects yet, but let's handle this future proof\n\n      if (snake_case !== elem.toLowerCase()) {\n        camelCase = true;\n      }\n\n      copy[snake_case] = clone(obj[elem]);\n    }\n\n    return copy;\n  }\n\n  return obj;\n}\n\nfunction convenienceClone(obj) {\n  camelCase = false;\n  obj = clone(obj) || {};\n\n  if (camelCase) {\n    obj.camel_case = true;\n  }\n\n  return obj;\n}\n\nfunction callbackOrEmit(self, callback, err, res) {\n  if (callback) {\n    callback(err, res);\n  } else if (err) {\n    self.emit('error', err);\n  }\n}\n\nfunction replyInOrder(self, callback, err, res, queue) {\n  // If the queue is explicitly passed, use that, otherwise fall back to the offline queue first,\n  // as there might be commands in both queues at the same time\n  var command_obj;\n  /* istanbul ignore if: TODO: Remove this as soon as we test Redis 3.2 on travis */\n\n  if (queue) {\n    command_obj = queue.peekBack();\n  } else {\n    command_obj = self.offline_queue.peekBack() || self.command_queue.peekBack();\n  }\n\n  if (!command_obj) {\n    process.nextTick(function () {\n      callbackOrEmit(self, callback, err, res);\n    });\n  } else {\n    var tmp = command_obj.callback;\n    command_obj.callback = tmp ? function (e, r) {\n      tmp(e, r);\n      callbackOrEmit(self, callback, err, res);\n    } : function (e, r) {\n      if (e) {\n        self.emit('error', e);\n      }\n\n      callbackOrEmit(self, callback, err, res);\n    };\n  }\n}\n\nmodule.exports = {\n  reply_to_strings: replyToStrings,\n  reply_to_object: replyToObject,\n  print: print,\n  err_code: /^([A-Z]+)\\s+(.+)$/,\n  monitor_regex: /^[0-9]{10,11}\\.[0-9]+ \\[[0-9]+ .+\\]( \".+?\")+$/,\n  clone: convenienceClone,\n  callback_or_emit: callbackOrEmit,\n  reply_in_order: replyInOrder\n};","map":{"version":3,"sources":["/home/daniel/Projects/critter-catcher/node_modules/redis/lib/utils.js"],"names":["replyToObject","reply","length","Array","obj","i","toString","replyToStrings","Buffer","res","print","err","console","log","camelCase","clone","copy","isArray","Object","prototype","call","elems","keys","elem","pop","snake_case","replace","toLowerCase","convenienceClone","camel_case","callbackOrEmit","self","callback","emit","replyInOrder","queue","command_obj","peekBack","offline_queue","command_queue","process","nextTick","tmp","e","r","module","exports","reply_to_strings","reply_to_object","err_code","monitor_regex","callback_or_emit","reply_in_order"],"mappings":"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","sourcesContent":["'use strict';\n\n// hgetall converts its replies to an Object. If the reply is empty, null is returned.\n// These function are only called with internal data and have therefore always the same instanceof X\nfunction replyToObject (reply) {\n    // The reply might be a string or a buffer if this is called in a transaction (multi)\n    if (reply.length === 0 || !(reply instanceof Array)) {\n        return null;\n    }\n    var obj = {};\n    for (var i = 0; i < reply.length; i += 2) {\n        obj[reply[i].toString('binary')] = reply[i + 1];\n    }\n    return obj;\n}\n\nfunction replyToStrings (reply) {\n    if (reply instanceof Buffer) {\n        return reply.toString();\n    }\n    if (reply instanceof Array) {\n        var res = new Array(reply.length);\n        for (var i = 0; i < reply.length; i++) {\n            // Recusivly call the function as slowlog returns deep nested replies\n            res[i] = replyToStrings(reply[i]);\n        }\n        return res;\n    }\n\n    return reply;\n}\n\nfunction print (err, reply) {\n    if (err) {\n        // A error always begins with Error:\n        console.log(err.toString());\n    } else {\n        console.log('Reply: ' + reply);\n    }\n}\n\nvar camelCase;\n// Deep clone arbitrary objects with arrays. Can't handle cyclic structures (results in a range error)\n// Any attribute with a non primitive value besides object and array will be passed by reference (e.g. Buffers, Maps, Functions)\n// All capital letters are going to be replaced with a lower case letter and a underscore infront of it\nfunction clone (obj) {\n    var copy;\n    if (Array.isArray(obj)) {\n        copy = new Array(obj.length);\n        for (var i = 0; i < obj.length; i++) {\n            copy[i] = clone(obj[i]);\n        }\n        return copy;\n    }\n    if (Object.prototype.toString.call(obj) === '[object Object]') {\n        copy = {};\n        var elems = Object.keys(obj);\n        var elem;\n        while (elem = elems.pop()) {\n            if (elem === 'tls') { // special handle tls\n                copy[elem] = obj[elem];\n                continue;\n            }\n            // Accept camelCase options and convert them to snake_case\n            var snake_case = elem.replace(/[A-Z][^A-Z]/g, '_$&').toLowerCase();\n            // If camelCase is detected, pass it to the client, so all variables are going to be camelCased\n            // There are no deep nested options objects yet, but let's handle this future proof\n            if (snake_case !== elem.toLowerCase()) {\n                camelCase = true;\n            }\n            copy[snake_case] = clone(obj[elem]);\n        }\n        return copy;\n    }\n    return obj;\n}\n\nfunction convenienceClone (obj) {\n    camelCase = false;\n    obj = clone(obj) || {};\n    if (camelCase) {\n        obj.camel_case = true;\n    }\n    return obj;\n}\n\nfunction callbackOrEmit (self, callback, err, res) {\n    if (callback) {\n        callback(err, res);\n    } else if (err) {\n        self.emit('error', err);\n    }\n}\n\nfunction replyInOrder (self, callback, err, res, queue) {\n    // If the queue is explicitly passed, use that, otherwise fall back to the offline queue first,\n    // as there might be commands in both queues at the same time\n    var command_obj;\n    /* istanbul ignore if: TODO: Remove this as soon as we test Redis 3.2 on travis */\n    if (queue) {\n        command_obj = queue.peekBack();\n    } else {\n        command_obj = self.offline_queue.peekBack() || self.command_queue.peekBack();\n    }\n    if (!command_obj) {\n        process.nextTick(function () {\n            callbackOrEmit(self, callback, err, res);\n        });\n    } else {\n        var tmp = command_obj.callback;\n        command_obj.callback = tmp ?\n            function (e, r) {\n                tmp(e, r);\n                callbackOrEmit(self, callback, err, res);\n            } :\n            function (e, r) {\n                if (e) {\n                    self.emit('error', e);\n                }\n                callbackOrEmit(self, callback, err, res);\n            };\n    }\n}\n\nmodule.exports = {\n    reply_to_strings: replyToStrings,\n    reply_to_object: replyToObject,\n    print: print,\n    err_code: /^([A-Z]+)\\s+(.+)$/,\n    monitor_regex: /^[0-9]{10,11}\\.[0-9]+ \\[[0-9]+ .+\\]( \".+?\")+$/,\n    clone: convenienceClone,\n    callback_or_emit: callbackOrEmit,\n    reply_in_order: replyInOrder\n};\n"]},"metadata":{},"sourceType":"script"}